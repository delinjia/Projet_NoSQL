{
  "paragraphs": [
    {
      "text": "%md\n## 1. Download S3",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:39:04+0100",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>1. Download S3</h2>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959077417_157470010",
      "id": "paragraph_1610959077417_157470010",
      "dateCreated": "2021-01-18T09:37:57+0100",
      "dateStarted": "2021-01-18T09:39:04+0100",
      "dateFinished": "2021-01-18T09:39:07+0100",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:364"
    },
    {
      "text": "import sys.process._\nimport java.net.URL\nimport java.io.File\nimport java.io.File\nimport java.nio.file.{Files, StandardCopyOption}\nimport java.net.HttpURLConnection \nimport org.apache.spark.sql.functions._\n\n// Fonction fileDownloader\n\ndef fileDownloader(urlOfFileToDownload: String, fileName: String) = {\n    val url = new URL(urlOfFileToDownload)\n    val connection = url.openConnection().asInstanceOf[HttpURLConnection]\n    connection.setConnectTimeout(5000)\n    connection.setReadTimeout(5000)\n    connection.connect()\n\n    if (connection.getResponseCode >= 400)\n        println(\"error\")\n    else\n        url #> new File(fileName) !!\n}",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:39:53+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610958807341_343866693",
      "id": "paragraph_1610958807341_343866693",
      "dateCreated": "2021-01-18T09:33:27+0100",
      "status": "READY",
      "$$hashKey": "object:365"
    },
    {
      "text": "// Configuration de l'accès au bucket S3\n\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\n    \nval AWS_ID = \"ASIA42MK5CSXKVCHJXK6\"\nval AWS_KEY = \"zoL8KB0/Ayil2q5hgct9FUSoGEXZfvQ+egNVIBo0\"\n// la classe AmazonS3Client n'est pas serializable\n// on rajoute l'annotation @transient pour dire a Spark de ne pas essayer de serialiser cette classe et l'envoyer aux executeurs\n@transient val awsClient = new AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY))\n\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) // mettre votre ID du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) // mettre votre secret du fichier credentials.csv\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:41:14+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959073306_917290417",
      "id": "paragraph_1610959073306_917290417",
      "dateCreated": "2021-01-18T09:37:53+0100",
      "status": "READY",
      "$$hashKey": "object:366"
    },
    {
      "text": "// Téléchargement du fichier masterfilelist.txt et masterfilelist_translation.txt\n\nfileDownloader(\"http://data.gdeltproject.org/gdeltv2/masterfilelist.txt\", \"/tmp/masterfilelist.txt\")\nfileDownloader(\"http://data.gdeltproject.org/gdeltv2/masterfilelist-translation.txt\", \"/tmp/masterfilelist_translation.txt\") \n\nawsClient.putObject(\"delin-jia-telecom-msbgd2020\", \"masterfilelist.txt\", new File( \"/tmp/masterfilelist.txt\") )\nawsClient.putObject(\"delin-jia-telecom-msbgd2020\", \"masterfilelist_translation.txt\", new File( \"/tmp/masterfilelist_translation.txt\") )",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T14:48:24+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959157689_1136467828",
      "id": "paragraph_1610959157689_1136467828",
      "dateCreated": "2021-01-18T09:39:17+0100",
      "status": "READY",
      "$$hashKey": "object:367"
    },
    {
      "text": "%md Verifions que le fichier a bien ete uploade dans le bucket S3 via un dataframe Spark",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:43:58+0100",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Verifions que le fichier a bien ete uploade dans le bucket S3 via un dataframe Spark</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959157533_849708008",
      "id": "paragraph_1610959157533_849708008",
      "dateCreated": "2021-01-18T09:39:17+0100",
      "dateStarted": "2021-01-18T09:43:58+0100",
      "dateFinished": "2021-01-18T09:43:58+0100",
      "status": "FINISHED",
      "$$hashKey": "object:368"
    },
    {
      "text": "// Conversion du fichier masterfilelist.txt en Data Frame\n\nimport org.apache.spark.sql.SQLContext\n\nval sqlContext = new SQLContext(sc)\n\n\n                    \nval filesDF_eng = sqlContext.read.\n                    option(\"delimiter\",\" \").\n                    option(\"infer_schema\",\"true\").\n                    csv(\"s3://delin-jia-telecom-msbgd2020/masterfilelist.txt\").\n                    withColumnRenamed(\"_c0\",\"size\").\n                    withColumnRenamed(\"_c1\",\"hash\").\n                    withColumnRenamed(\"_c2\",\"url\").\n                    cache\n\n//DF pour masterfilelist-translation                  \nval filesDF_translate = sqlContext.read.\n                    option(\"delimiter\",\" \").\n                    option(\"infer_schema\",\"true\").\n                    csv(\"s3://delin-jia-telecom-msbgd2020/masterfilelist-translation.txt\").\n                    withColumnRenamed(\"_c0\",\"size\").\n                    withColumnRenamed(\"_c1\",\"hash\").\n                    withColumnRenamed(\"_c2\",\"url\").\n                    cache\n\n\n//concaténation des 2 fichiers                    \nval filesDF = filesDF_eng.union(filesDF_translate)\n                    \n                    \n\n",
      "user": "anonymous",
      "dateUpdated": "2021-01-22T12:15:15+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959157377_1917532176",
      "id": "paragraph_1610959157377_1917532176",
      "dateCreated": "2021-01-18T09:39:17+0100",
      "status": "READY",
      "$$hashKey": "object:369"
    },
    {
      "text": "filesDF.show(false)",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:44:37+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959157212_542415760",
      "id": "paragraph_1610959157212_542415760",
      "dateCreated": "2021-01-18T09:39:17+0100",
      "status": "READY",
      "$$hashKey": "object:370"
    },
    {
      "text": "%md Par la suite on va charger uniquement les fichiers qui correspond à 2020 1ere octobre",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T09:49:44+0100",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Par la suite on va charger uniquement les fichiers qui correspond à 2020 1ere octobre</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959157044_471228052",
      "id": "paragraph_1610959157044_471228052",
      "dateCreated": "2021-01-18T09:39:17+0100",
      "dateStarted": "2021-01-18T09:49:44+0100",
      "dateFinished": "2021-01-18T09:49:44+0100",
      "status": "FINISHED",
      "$$hashKey": "object:371"
    },
    {
      "text": "val sampleDF = filesDF.filter(col(\"url\").contains(\"/20201001\")).cache\n\nsampleDF.show(false)",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T10:50:19+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959156882_383807439",
      "id": "paragraph_1610959156882_383807439",
      "dateCreated": "2021-01-18T09:39:16+0100",
      "status": "READY",
      "$$hashKey": "object:372"
    },
    {
      "text": "%md Nous allons charger tous ces fichiers dans le bucket S3 via un ETL Spark:",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T10:50:26+0100",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Nous allons charger tous ces fichiers dans le bucket S3 via un ETL Spark:</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959156693_1806715341",
      "id": "paragraph_1610959156693_1806715341",
      "dateCreated": "2021-01-18T09:39:16+0100",
      "dateStarted": "2021-01-18T10:50:26+0100",
      "dateFinished": "2021-01-18T10:50:26+0100",
      "status": "FINISHED",
      "$$hashKey": "object:373"
    },
    {
      "text": "object AwsClient{\n    val s3 = new AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY))\n}\n\n\nsampleDF.select(\"url\").repartition(100).foreach( r=> {\n            val URL = r.getAs[String](0)\n            val fileName = r.getAs[String](0).split(\"/\").last\n            val dir = \"/tmp/\"\n            val localFileName = dir + fileName\n            fileDownloader(URL,  localFileName)\n            val localFile = new File(localFileName)\n            AwsClient.s3.putObject(\"delin-jia-telecom-msbgd2020\", fileName, localFile )\n            localFile.delete()\n            \n})",
      "user": "anonymous",
      "dateUpdated": "2021-01-18T14:48:44+0100",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1610959156512_1437371783",
      "id": "paragraph_1610959156512_1437371783",
      "dateCreated": "2021-01-18T09:39:16+0100",
      "status": "READY",
      "$$hashKey": "object:374"
    }
  ],
  "name": "2020_Projet GDELT_Download",
  "id": "2FXUE8FPS",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/2020_Projet GDELT_Download"
}